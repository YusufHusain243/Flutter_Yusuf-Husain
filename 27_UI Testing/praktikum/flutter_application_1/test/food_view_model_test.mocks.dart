// Mocks generated by Mockito 5.1.0 from annotations
// in flutter_application_1/test/food_view_model_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i6;

import 'package:flutter_application_1/model/api/food_api.dart' as _i2;
import 'package:flutter_application_1/model/food_model.dart' as _i5;
import 'package:flutter_application_1/screen/food/food_view_model.dart' as _i3;
import 'package:flutter_application_1/screen/food/food_view_state.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFoodAPI_0 extends _i1.Fake implements _i2.FoodAPI {}

/// A class which mocks [FoodViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodViewModel extends _i1.Mock implements _i3.FoodViewModel {
  MockFoodViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FoodAPI get foodAPI => (super.noSuchMethod(Invocation.getter(#foodAPI),
      returnValue: _FakeFoodAPI_0()) as _i2.FoodAPI);
  @override
  set foodAPI(_i2.FoodAPI? _foodAPI) =>
      super.noSuchMethod(Invocation.setter(#foodAPI, _foodAPI),
          returnValueForMissingStub: null);
  @override
  _i4.FoodViewState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i4.FoodViewState.none) as _i4.FoodViewState);
  @override
  List<_i5.Food> get foods =>
      (super.noSuchMethod(Invocation.getter(#foods), returnValue: <_i5.Food>[])
          as List<_i5.Food>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  dynamic ChangeState(_i4.FoodViewState? s) =>
      super.noSuchMethod(Invocation.method(#ChangeState, [s]));
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
